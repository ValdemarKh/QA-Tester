Теория Тестирования
Требования ТЗ(Спецификации) – 
1)	Бизнес требования – назначение ПО.
2)	User requirements – пользовательские требования – как пользователь сможет заходить и пользоваться продуктом.
3)	Функциональные требования – выполняются основные функции сайта или игры.
4)	Нефункциональные требования: загрузка сайта, безопасность сайта.

Требования к требованиям со стороны тестировщика.
1)	Единичность требования (разработка одной функциональности)
2)	Завершенность требования(начало и завершение каждой функциональности)
3)	Последовательность действий – начинать с глобального и заканчивать не основным)
4)	Атомарность – неделимость(целосность) каждой задачи
5)	Отслеживаемость – контроль заказчика. Понимание как отследить требования.
6)	Актуальность  - требования которые актуальные на сегодняшний день(наличие факса не актуально)
7)	Выполнимость – то что относится конкретно к работе команды. Не создавать ракету(программистами)
8)	Двусмысленность (цвет кнопки – конкретика)
9)	Обязательность требований. Приоритет на них. Но возможно сделать и необязательные требования. Когда основные выполнены.
10)	Проверяемость 

Техника тестирования требования
1)	Walkthrogh – беглый просмотр
2)	Technical review – юридический отдел или бухгалтерия визирует
3)	Inspection – формальная инспекция.

Уровни тестирования
Уровень тестирования определяет над чем производятся тесты.
Unit Testing(автотесты(модульное тестирование) программист) – Integration Testing(QA. работа формы регистрации к примеру(общий модуль) – System testing(проверка модуля в общей системе(сайта к примеру) – Acceptance Testing(Приемочное тестирование - UAT User Acceptance Testing(A and B) testing)-на стороне заказчика. Убедиться что все работает правильно.(Alfa Testing(закрытой группой пользователей, продукт сырой) and Beta Testing(реклама и дополнительный тестинг пользователями)
TDD – Test Dreaming Development – тесты пишутся перед кодом.

Виды тестирования
1)	По запуску кода на исполнние
а)  – статическое тестирование (документы, дизайн, тз)
б) динамическое тестирование (тестирование по запуску кода. Отправка данных в поле ввода)

2)	По доступу к коду и архитектуре приложения
А) Черный ящик – без единой инфо
Б) Серый ящик – частичный доступ к информации
С) Белый ящик – наличие полной информации и доступа к коду.

3)	По степени автоматизации
А) Manual Testing – ручное тестирование
Б) Automated Testing – автоматизированное тестирование
C) Partially Testing – полу автоматизированное тестирование

4)	По уровню “тестирования” детализации приложения
А) Модульное – проверка небольших частей приложения
Б) Интеграционное  - проверяется взаимодействие по нескольким частям приложения
С) Системное тестирование  - приложение проверяется как единое целое.

5)	По принципам работы приложения
А) Позитивное тестирование – проверка ПО по ТЗ
Б) Негативное тестирование – не по ТЗ. Пытаемся ввести совершенно другие запросы и смотрим результат.(Пытаемся хакнуть)

6)	По степени подготовленности
А) Тестирование по документации(более качественное чем Ad Hoc Testing)
Б) AD Hoc Testing – тестирование без подготовки( Не имея никаких документов) Интуитивное.

7)	По обьекту тестирования: 
a)	Функциональное тестирование – рассматривает зарание указанное поведение и основывается на анализе спецификаций функциональности компонента или системы в целом. Имитирует фактическое использование системы. Возможны упущения логических ошибок в ПО.
b)	Не функциональное тестирование
b.1)  Performance testing -  тестирование производительности – в dev tools раздел
b.2) Stress testing – стрессовое тестирование. (что то за пределами функционального тестирования) Ездить на лыжах по асфальту.
b.3) Load-Volume  testing  - нагрузочное тестирование(в Jmeter)
b.4) Security  testing – тестирование безопасности

Installation  testing – Проверка инсталяции и деинсталяции приложения(ПО)
Usability testing – удобство использование ПО. Сравнение с личным опытом.
Failover and Recovery testing – тестирование на отказ и восстановление. Отказ сети. Возможность корректного восстановления.
Configuration testing – тестирование ( на разных устройствах, браузерах, платформах)
Виды тестирования связанные с изменениями:
1)	Smoke testing – проверка самой важной и ключевой идеи работы ПО.
2)	Sanity testing – санитарное тестирование(проверить конкретный функционал)
3)	Regression testing – проводится чтобы убедиться что функции, которые работали раньше работают также правильно.
4)	Re testing  - проверка ПО после исправления бага.
Git команды - 

Build – сборка – процесс преобразования исходного кода, написанного программистами в конечный работающий продукт.
Основными этапами является:
Компиляция – файлы исходного кода преобразуются в промежуточный код для простых программ
Связывание – (для более сложных программ) нахождения реального положения всех функций, обозначенных как внешние. Это выполняется специальной программой Линкером.
Deploy – процесс разворачивания проекта на продакшин сервере.
CI (Continuous Integration) – Система непрерывной интеграции – это практика разработки ПО, которая заключается в выполнении частых автоматизированных сборок проекта для скорейшего выявления и решения интеграционных проблем.
Техника тест дизайна – это способ подбора тестовых данных. Цель всех техник тест дизайна – уменьшить количество тест кейсов. 
1)	Классы эквивалентности или эквивалентное разделения(достаточно проверить одно позитивное и несколько негативных)
2)	Анализ граничных значений.
Определить классы эквивалентности и граничные значения. 
Миним на депозит 1бакс
Макс 999дол.
Клиент вкладывает 500бакс – 5%
Клиент вкладывает более 500бакс – 15%

По эквивалентности:
1 бакс- – 500- 999 – позитив 320 и 755, -125, 1560.
0.1.2.499.500.501.998.999.1000
Тестирование ортогональных массивов – техника попарного тестирования.
Причина/следствия (Cause Effect) – шаги в написании test cases(причины и следствия после выполнения)
Предугадывание ошибки  - написание негативного сценария тестирование(такого который может выдать ошибку)
Дефект(Bug) – это отклонение фактического результата от ожиданий наблюдателя, сформированных на основании требований любой документации и здравого смысла.
Ожидаемый результат  - это поведение системы, такое, которое прописано в требованиях. 
Bug report – технический документ, который содержит в себе полное описание бага и условие его возникновение.
Обязательные поля  Bug Report:
1)	Summary – заголовок(краткое описание)
2)	Severity – серьезность(бага)
3)	Steps to reproduce(шаги воспроизведения)
4)	Actual result (фактический результат)
5)	Expected  Result(ожидаемый результат)
6)	Priority (не обязательно) приоритет


                                                            






Backlog – хранилище задач на весь проект или же на sprint(2 недели в среднем)
Severity – это классификация бага с точки зрения степени влияния на работоспособность ПО.
1)	Bloker – не рабочее состояние. Блокирует работу ПО.
2)	Critical – Критическая ошибка приводящая ключевой функционал в нерабочее состояние.
3)	Major – серьезная ошибка. Отклонения от бизнес логики и нарушающая работу программы. Не имеет критического воздействия на приложение.
4)	Minor – Незначительный дефект, который не нарушает работу функционала. (ошибка дизайна) Но дает несоответствие ожидаемому результату.
5)	Trivial – Незначительная ошибка не имеющая влияния на функционал или работу программы. Но который может быть обнаружен визуально. Например ошибки в тексте.
Priority – это скорость исправления ошибки. Как быстро ее нужно исправить.
High – высокий. Исправить быстро. Влияет критически.
Medium – средний. Дефект должен быть обязательно исправлен. Но он не оказывает критического воздействия на работу приложения.
Low –низкий. Ошибка должна быть исправлена. Но она не имеет критического влияния на программу и устранение может быть отложено, в зависимости от наличия других, более приоритетных дефектов.

Мобильное тестирование. Этапы тестирования мобильных приложений.
1) Тестирование установки - 



2) Тестирование совместимости - 



3) Стрессовое тестирование - 




4) Нагрузочное тестирование - 




5) Функциональное тестирование - 




6) Тестирование локализации - 





7) Юзабилити тестирование - 





8) Автоматизированное тестирование - 





